
// Ines Prieto Centeno

// Comentario general sobre la solución,
// explicando cómo se resuelve el problema

#include <iostream>
#include <fstream>

#include "PriorityQueue.h" // propios o los de las estructuras de datos de clase

struct orquesta {
	int personas;
	int partituras;
};

bool operator<(orquesta const& o1, orquesta const& o2) {
	return o1.personas > o2.personas || (o1.partituras == o2.partituras && o1.partituras < o2.partituras);
}

bool resuelveCaso() {
	int numGrupos, numPartituras, num;
	std::cin >> numPartituras;

	if (!std::cin)
		return false;

	PriorityQueue<orquesta> cola;

	std::cin >> numGrupos;
	
	for (int i = 0; i < numGrupos; ++i) {
		std::cin >> num;
		cola.push({ num , 1 });
	}

	int numPartiturasActivas = numPartituras - numGrupos;

	for (int i = 0; i < numPartiturasActivas; ++i) {
		int personas = cola.top().personas;
		int part = cola.top().partituras + 1;
		cola.pop();
		cola.push({ personas / part, part });
	}

	std::cout << cola.top().personas << std::endl;
	return true;
}

int main() {
	// ajustes para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
	std::ifstream in("casos.txt");
	auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

	while (resuelveCaso());

	// para dejar todo como estaba al principio
#ifndef DOMJUDGE
	std::cin.rdbuf(cinbuf);
	system("PAUSE");
#endif
	return 0;
}
